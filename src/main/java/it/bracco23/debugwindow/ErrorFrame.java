package it.bracco23.debugwindow;

import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.ArrayList;
import static java.awt.EventQueue.invokeLater;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.util.LinkedList;
import java.util.List;
import javax.swing.ListModel;
import javax.swing.event.ListDataEvent;
import javax.swing.event.ListDataListener;

/**
 * Helpful tool while developing with java, it create a window that
 * automatically catch every uncaught exception and list them all, When you
 * click on an exception, it shows in a text area the stack trace so that you
 * can check where the exception happened. It also has a text field to help
 * track variables.
 *
 * It uses the Singleton pattern, so you can just have one instance of the class
 * at time. To get that instance, just use the static {@link #getErrorFrame}
 * method.
 *
 *
 * @author emiddio
 */
public class ErrorFrame extends javax.swing.JFrame {

    private final ArrayList<ThreadThrowablePair> coda;
    private static ErrorFrame err;
    private final List<ListDataListener> list;
    private final ByteArrayOutputStream stdout;
    private final ByteArrayOutputStream stderr;

    /**
     * This Function return the only instance of a ErrorFrame. In the function,
     * the object is created if it doesn't already exist, and it is returned.
     * After the first call, in which the object is created, the method return
     * always the same object.
     *
     * @param autoclose true if you want the window to die with the thread that
     * calls it
     * @return the ErrorFrame representing the window creater, a JFrame Object
     */
    public static ErrorFrame getErrorFrame(boolean autoclose) {
        if (err == null) {
            err = new ErrorFrame(autoclose);
        }
        return err;
    }

    private ErrorFrame(boolean autoclose) {
        invokeLater(new Runnable() {
            @Override
            public void run() {
                initComponents();
                setVisible(true);
            }
        });
        list = new LinkedList<ListDataListener>();
        coda = new ArrayList<ThreadThrowablePair>();
        stdout = new ByteArrayOutputStream();
        stderr = new ByteArrayOutputStream();
        Thread.setDefaultUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {
            @Override
            public void uncaughtException(Thread t, Throwable e) {
                add(t, e);
            }
        });
        System.setOut(new PrintStream(stdout));
        System.setErr(new PrintStream(stderr));
        if (autoclose) {
            final Thread t = Thread.currentThread();
            new Thread(new Runnable() {
                @Override
                public void run() {
                    try {
                        t.join();
                    } catch (InterruptedException ex) {
                    } finally {
                        dispose();
                    }
                }
            }).start();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jSplitPane1 = new javax.swing.JSplitPane();
        errorList = new javax.swing.JList<String>();
        jScrollPane1 = new javax.swing.JScrollPane();
        stackTraceArea = new javax.swing.JTextArea();
        customTxt = new javax.swing.JTextField();
        clearBtn = new javax.swing.JButton();
        btnOut = new javax.swing.JButton();
        btnErr = new javax.swing.JButton();

        setTitle("ErrorFrame");
        setPreferredSize(new java.awt.Dimension(800, 600));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jSplitPane1.setDividerLocation(0.2);
        jSplitPane1.setDividerSize(4);
        jSplitPane1.setResizeWeight(0.2);

        errorList.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        errorList.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        errorList.setModel(new PairModel());
        errorList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        errorList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                errorListMouseClicked(evt);
            }
        });
        jSplitPane1.setLeftComponent(errorList);

        stackTraceArea.setColumns(20);
        stackTraceArea.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        stackTraceArea.setLineWrap(true);
        stackTraceArea.setRows(5);
        jScrollPane1.setViewportView(stackTraceArea);

        jSplitPane1.setRightComponent(jScrollPane1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jSplitPane1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 493;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(9, 15, 16, 15);
        getContentPane().add(customTxt, gridBagConstraints);

        clearBtn.setText("Clear");
        clearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        getContentPane().add(clearBtn, gridBagConstraints);

        btnOut.setText("Show StdOut");
        btnOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOutActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(btnOut, gridBagConstraints);

        btnErr.setText("Show StdErr");
        btnErr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnErrActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(btnErr, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void errorListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_errorListMouseClicked
        Throwable tr;
        int selected = errorList.getSelectedIndex();
        if (selected >= 0 && selected < coda.size()) {
            ThreadThrowablePair ex = coda.get(selected);
            final StringWriter s = new StringWriter();
            if ((tr = ex.getThrowable()) != null) {
                tr.printStackTrace(new PrintWriter(s));
            }
            invokeLater(new Runnable() {
                @Override
                public void run() {
                    stackTraceArea.setText(s.toString());
                }
            });
        }
    }//GEN-LAST:event_errorListMouseClicked

    private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBtnActionPerformed
        coda.clear();
        errorList.updateUI();
        stackTraceArea.setText("");
    }//GEN-LAST:event_clearBtnActionPerformed

    private void btnOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOutActionPerformed
        stackTraceArea.setText(stdout.toString());
    }//GEN-LAST:event_btnOutActionPerformed

    private void btnErrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnErrActionPerformed
        stackTraceArea.setText(stderr.toString());
    }//GEN-LAST:event_btnErrActionPerformed

    /**
     * It can be used to add Exception to the list. The method let you maually
     * add an Exception and the Thread that throw it. The frame catch all the
     * uncaught exception and add them on automatically, but if you want to add
     * and Exception that you have already caught, you can use this.
     *
     * @param t Thread that launched the Throwabled
     * @param cause Throwable launched by t
     */
    public void add(Thread t, Throwable cause) {
        coda.add(new ThreadThrowablePair(t, cause));
        ListDataEvent ev = new ListDataEvent(this, ListDataEvent.CONTENTS_CHANGED, coda.size() - 1, coda.size() - 1);
        for (ListDataListener l : list) {
            l.contentsChanged(ev);
        }
    }

    /**
     * Print a String inside a field on the Frame. It can be used to print a
     * string inside the form, without touching the Exception Handler System.
     *
     * @param s the string to be printed
     */
    public void setText(final String s) {
        invokeLater(new Runnable() {
            @Override
            public void run() {
                customTxt.setText(s);
            }
        });
    }

    /**
     * Return the text inside the field of the form.
     *
     * @return the text already printed inside the field.
     */
    public String getText() {
        return customTxt.getText();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnErr;
    private javax.swing.JButton btnOut;
    private javax.swing.JButton clearBtn;
    private javax.swing.JTextField customTxt;
    private javax.swing.JList<String> errorList;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTextArea stackTraceArea;
    // End of variables declaration//GEN-END:variables

    /**
     * ThreadThrowabelPair class, used to store the couple of a Throwable
     * recieved and the thread that throwed it.
     */
    private class ThreadThrowablePair {

        Thread t;
        Throwable cause;

        ThreadThrowablePair(Thread t, Throwable cause) {
            this.t = t;
            this.cause = cause;
        }

        Thread getThread() {
            return t;
        }

        Throwable getThrowable() {
            return cause;
        }
    }

    /**
     * ListModel used by the list of throwable. It uses the underlying queue to
     * store the recieved throwable.
     */
    private class PairModel implements ListModel<String> {

        @Override
        public int getSize() {
            return coda.size();
        }

        @Override
        public String getElementAt(int index) {
            ThreadThrowablePair t = coda.get(index);
            return t.getThrowable().getClass().getSimpleName() + ": " + t.getThread().getName();
        }

        @Override
        public void addListDataListener(ListDataListener l) {
            list.add(l);
        }

        @Override
        public void removeListDataListener(ListDataListener l) {
            list.remove(l);
        }

    }
}
